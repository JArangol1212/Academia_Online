
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  slug        String  @unique @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       String?
  isPublished Boolean @default(false)
  level       String? @db.Text

  category String? @db.Text

  chapters Chapter[]
  purcharses Purchase[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model UserProgress{
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId,chapterId])
  @@index([chapterId])
  

}

model Purchase {

  id String @id @default(uuid())
  userId String
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId,courseId])
  @@index([courseId])

}

model StripeCustomer {

  id String @id @default(uuid())
  userId String @unique
  StripeCustomerId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}